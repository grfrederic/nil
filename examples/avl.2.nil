-- PEANO ARITHMETIC
z : P
s : P -> P

greater ? P P
greater (s ~x) z
greater (s ~x) (s ~y) <- greater ~x ~y


-- AVL TREE KEEPING TRACK OF HEIGHT
avl   : (AVL0 ~H ~A) -> AVL ~A

leaf  : AVL0 Z ~A
lnode : (AVL0 (S ~H) ~A) ~A (AVL0 ~H ~A) -> AVL0 (S (S ~H)) ~A
rnode : (AVL0 ~H ~A) ~A (AVL0 (S ~H) ~A) -> AVL0 (S (S ~H)) ~A
mnode : (AVL0 ~H ~A) ~A (AVL0 ~H ~A) -> AVL0 (S ~H) ~A


-- MAYBE NEXT?
stay : (AVL0 ~H ~A) -> MaybeBiggerAVL0 ~H ~A
grow : (AVL0 (S ~H) ~A) -> MaybeBiggerAVL0 ~H ~A


-- RIGHT ROTATION
rotr ? (AVL0 (S (S ~H)) ~A) ~A (AVL0 ~H ~A) (MaybeBiggerAVL0 (S (S ~H)) ~A)

-- single rot
rotr (lnode ~ll ~lv ~lr) ~v ~r (stay (mnode ~ll ~lv (mnode ~lr ~v ~r)))
rotr (mnode ~ll ~lv ~lr) ~v ~r (grow (rnode ~ll ~lv (lnode ~lr ~v ~r)))

-- double rot
rotr (rnode ~ll ~lv (lnode ~lrl ~lrv ~lrr)) ~v ~r (stay (mnode (mnode ~ll ~lv ~lrl) ~lrv (rnode ~lrr ~v ~r))) 
rotr (rnode ~ll ~lv (mnode ~lrl ~lrv ~lrr)) ~v ~r (stay (mnode (mnode ~ll ~lv ~lrl) ~lrv (mnode ~lrr ~v ~r))) 
rotr (rnode ~ll ~lv (rnode ~lrl ~lrv ~lrr)) ~v ~r (stay (mnode (lnode ~ll ~lv ~lrl) ~lrv (mnode ~lrr ~v ~r))) 


-- LEFT ROTATION
rotl ? (AVL0 ~H ~A) ~A (AVL0 (S (S ~H)) ~A) (MaybeBiggerAVL0 (S (S ~H)) ~A)

-- single rot
rotl ~l ~v (rnode ~rl ~rv ~rr) (stay (mnode (mnode ~l ~v ~rl) ~rv ~rr))
rotl ~l ~v (mnode ~rl ~rv ~rr) (grow (lnode (rnode ~l ~v ~rl) ~rv ~rr))

-- double rot
rotl ~l ~v (lnode (rnode ~rll ~rlv ~rlr) ~rv ~rr) (stay (mnode (lnode ~l ~v ~rll) ~rlv (mnode ~rlr ~rv ~rr))) 
rotl ~l ~v (lnode (mnode ~rll ~rlv ~rlr) ~rv ~rr) (stay (mnode (mnode ~l ~v ~rll) ~rlv (mnode ~rlr ~rv ~rr))) 
rotl ~l ~v (lnode (lnode ~rll ~rlv ~rlr) ~rv ~rr) (stay (mnode (mnode ~l ~v ~rll) ~rlv (rnode ~rlr ~rv ~rr))) 



-- INSERT
insert0 ? P (AVL0 ~H P) (MaybeBiggerAVL0 ~H P)

-- empty
insert0 ~p leaf (grow (mnode leaf ~p leaf))

-- left
insert0 ~p (lnode ~l ~v ~r) (stay (lnode ~nl ~v ~r)) <- greater ~v ~p, insert0 ~p ~l (stay ~nl)
insert0 ~p (mnode ~l ~v ~r) (stay (mnode ~nl ~v ~r)) <- greater ~v ~p, insert0 ~p ~l (stay ~nl)
insert0 ~p (rnode ~l ~v ~r) (stay (rnode ~nl ~v ~r)) <- greater ~v ~p, insert0 ~p ~l (stay ~nl)

insert0 ~p (lnode ~l ~v ~r) ~nt <- greater ~v ~p, insert0 ~p ~l (grow ~nl), rotr ~nl ~v ~r ~nt
insert0 ~p (mnode ~l ~v ~r) (grow (lnode ~nl ~v ~r)) <- greater ~v ~p, insert0 ~p ~l (grow ~nl)
insert0 ~p (rnode ~l ~v ~r) (stay (mnode ~nl ~v ~r)) <- greater ~v ~p, insert0 ~p ~l (grow ~nl)

-- right
insert0 ~p (lnode ~l ~v ~r) (stay (lnode ~l ~v ~nr)) <- greater ~p ~v, insert0 ~p ~r (stay ~nr)
insert0 ~p (mnode ~l ~v ~r) (stay (mnode ~l ~v ~nr)) <- greater ~p ~v, insert0 ~p ~r (stay ~nr)
insert0 ~p (rnode ~l ~v ~r) (stay (rnode ~l ~v ~nr)) <- greater ~p ~v, insert0 ~p ~r (stay ~nr)

insert0 ~p (lnode ~l ~v ~r) (stay (mnode ~l ~v ~nr)) <- greater ~p ~v, insert0 ~p ~r (grow ~nr)
insert0 ~p (mnode ~l ~v ~r) (grow (rnode ~l ~v ~nr)) <- greater ~p ~v, insert0 ~p ~r (grow ~nr)
insert0 ~p (rnode ~l ~v ~r) ~nt <- greater ~p ~v, insert0 ~p ~r (grow ~nr), rotl ~l ~v ~nr ~nt

-- eq
insert0 ~p (lnode ~l ~p ~r) (stay (lnode ~l ~p ~r))
insert0 ~p (mnode ~l ~p ~r) (stay (mnode ~l ~p ~r))
insert0 ~p (rnode ~l ~p ~r) (stay (rnode ~l ~p ~r))



-- WRAPPED
insert ? P (AVL P) (AVL P)
insert ~p (avl ~t) (avl ~nt) <- insert0 ~p ~t (stay ~nt)
insert ~p (avl ~t) (avl ~nt) <- insert0 ~p ~t (grow ~nt)


-- EXAMPLE
insert z (avl leaf) ~t1, insert (s z) ~t1 ~t2, insert (s (s z)) ~t2 ~t3?
